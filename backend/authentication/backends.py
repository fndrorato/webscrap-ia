"""
Backend de autentica√ß√£o customizado usando Oracle Database
"""
import oracledb
from django.contrib.auth.backends import BaseBackend
from django.contrib.auth.models import User
from django.conf import settings
import logging

# Configurar logger
logger = logging.getLogger(__name__)

# Flag para garantir que thick mode √© inicializado apenas uma vez
_thick_mode_initialized = False


def _init_thick_mode():
    """Inicializa o thick mode do oracledb uma √∫nica vez."""
    global _thick_mode_initialized
    
    if not _thick_mode_initialized:
        try:
            # Caminho do Oracle Instant Client no Docker
            lib_dir = "/opt/oracle/instantclient_21_15"
            
            logger.info(f"Inicializando Oracle Client em modo THICK: {lib_dir}")
            print(f"üîß Inicializando Oracle Client em modo THICK: {lib_dir}")
            
            # Inicializa com o caminho expl√≠cito
            oracledb.init_oracle_client(lib_dir=lib_dir)
            
            logger.info("‚úÖ Oracle Client inicializado com sucesso em modo THICK!")
            print("‚úÖ Oracle Client inicializado com sucesso em modo THICK!")
            
            _thick_mode_initialized = True
            
        except Exception as e:
            logger.error(f"‚ùå ERRO ao inicializar Oracle Client: {e}")
            print(f"‚ùå ERRO ao inicializar Oracle Client: {e}")
            # N√£o lan√ßa exce√ß√£o - deixa tentar em thin mode
            # (embora n√£o v√° funcionar com Oracle antigo)


# Inicializa o thick mode quando o m√≥dulo √© importado
_init_thick_mode()


class OracleAuthBackend(BaseBackend):
    """
    Autentica usu√°rios validando credenciais diretamente no banco Oracle.
    Se a conex√£o for bem-sucedida, o usu√°rio √© v√°lido.
    """
    
    def authenticate(self, request, username=None, password=None, **kwargs):
        """
        Tenta autenticar conectando no Oracle com as credenciais fornecidas.
        
        Args:
            request: HttpRequest object
            username: Nome de usu√°rio Oracle
            password: Senha do usu√°rio Oracle
            
        Returns:
            User object se autentica√ß√£o bem-sucedida, None caso contr√°rio
        """
        # LOG: Backend foi chamado
        logger.info(f"üîê OracleAuthBackend.authenticate() chamado para username: {username}")
        print(f"üîê OracleAuthBackend.authenticate() chamado para username: {username}")
        
        if not username or not password:
            logger.warning("‚ö†Ô∏è  Username ou password n√£o fornecidos")
            print("‚ö†Ô∏è  Username ou password n√£o fornecidos")
            return None
        
        # Configura√ß√µes do Oracle
        oracle_host = settings.ORACLE_HOST
        oracle_port = settings.ORACLE_PORT
        oracle_service = settings.ORACLE_SERVICE_NAME
        
        logger.info(f"üì° Tentando conectar: {username}@{oracle_host}:{oracle_port}/{oracle_service}")
        print(f"üì° Tentando conectar: {username}@{oracle_host}:{oracle_port}/{oracle_service}")
        
        try:
            # Tenta conectar no Oracle com as credenciais fornecidas
            dsn = oracledb.makedsn(oracle_host, oracle_port, service_name=oracle_service)
            
            # Se conseguir conectar, credenciais s√£o v√°lidas
            connection = oracledb.connect(
                user=username,
                password=password,
                dsn=dsn
            )
            
            logger.info(f"‚úÖ Conex√£o Oracle bem-sucedida para usu√°rio: {username}")
            print(f"‚úÖ Conex√£o Oracle bem-sucedida para usu√°rio: {username}")
            
            # Buscar informa√ß√µes adicionais do usu√°rio no Oracle (opcional)
            cursor = connection.cursor()
            
            try:
                # Tenta pegar informa√ß√µes do usu√°rio
                cursor.execute("""
                    SELECT username, account_status, created 
                    FROM dba_users 
                    WHERE username = :username
                """, {'username': username.upper()})
                
                user_info = cursor.fetchone()
                
                if user_info and user_info[1] != 'OPEN':
                    # Conta Oracle n√£o est√° ativa
                    logger.warning(f"‚ö†Ô∏è  Conta Oracle '{username}' n√£o est√° ativa: {user_info[1]}")
                    print(f"‚ö†Ô∏è  Conta Oracle '{username}' n√£o est√° ativa: {user_info[1]}")
                    cursor.close()
                    connection.close()
                    return None
                    
            except oracledb.DatabaseError as db_err:
                # Se n√£o tiver permiss√£o para acessar dba_users, tudo bem
                # O importante √© que conseguiu conectar
                logger.debug(f"‚ÑπÔ∏è  N√£o foi poss√≠vel acessar dba_users (normal): {db_err}")
                pass
            
            cursor.close()
            connection.close()
            
            # Usu√°rio v√°lido no Oracle!
            # Criar ou atualizar usu√°rio no Django (para compatibilidade com JWT)
            user, created = User.objects.get_or_create(
                username=username.lower(),
                defaults={
                    'is_active': True,
                    'is_staff': False,
                    'is_superuser': False,
                }
            )
            
            if created:
                logger.info(f"‚ú® Novo usu√°rio Django criado para: {username}")
                print(f"‚ú® Novo usu√°rio Django criado para: {username}")
            else:
                logger.info(f"‚ôªÔ∏è  Usu√°rio Django existente: {username}")
                print(f"‚ôªÔ∏è  Usu√°rio Django existente: {username}")
            
            # N√£o salvamos a senha no Django por seguran√ßa
            # A autentica√ß√£o sempre ser√° via Oracle
            
            return user
            
        except oracledb.Error as e:
            # Erro de autentica√ß√£o Oracle (credenciais inv√°lidas, conta bloqueada, etc)
            error_obj, = e.args
            
            # Log do erro para debug
            logger.error(f"‚ùå Oracle authentication failed for user '{username}': [{error_obj.code}] {error_obj.message}")
            print(f"‚ùå Oracle authentication failed for user '{username}': [{error_obj.code}] {error_obj.message}")
            
            return None
            
        except Exception as e:
            # Erro inesperado
            logger.error(f"‚ùå Unexpected error during Oracle authentication: {e}")
            print(f"‚ùå Unexpected error during Oracle authentication: {e}")
            return None
    
    def get_user(self, user_id):
        """
        Recupera o usu√°rio pelo ID (necess√°rio para o Django)
        """
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None